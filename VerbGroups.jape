/*
*  
*  Filename: 		VerbGroups.jape
*  Description:		Annotates verb groups.
*  Based on ANNIE VP Chunker VerbGroups.jape by Diana Maynard, originally Copyright (c) 1998-2004, The University of Sheffield.
*
*  Original license: This file is part of GATE (see http://gate.ac.uk/), and is free
*  software, licenced under the GNU Library General Public License,
*  Version 2, June 1991 (in the distribution as file licence.html,
*  and also available at http://gate.ac.uk/gate/licence.html).				
*
*/

// Finite Verb Groups

Phase: FiniteVerbGroup
Input: Token
Options: control = appelt


Macro: ADVS
(
	({Token.category =~ "^RB", Token.string !=~ "not|never|n't"})[0,3]
)


// Negative Verb Groups (i.e. 'not' and other adverbials)
Macro: NEGATION
(
	{Token.category == RB, Token.string ==~ "not|never|n't"}
)


Macro: MODALS
(
	{Token.string ==~ "can|could|may|might|must|should|would"}
	|
	({Token.string == "ought"} {Token.string == "to"}) 
)

Macro: TO
(
	({Token.string == "to"})?
)

MACRO: NOT_TO
(
	(
		(NEGATION)
		(TO)
	) |
	(
		(TO)
		(NEGATION)
	)
)





  

Rule: FVGSimPrePasNeg
// Simple Present Passive: is not eaten or are not eaten
// (is | are) VBN
(
	{Token.string ==~ "is|are" }
	(NEGATION)
	(ADVS)
	{Token.category == "VBN"}
):annotate 
-->
 :annotate.VG = {
 	type = "FVG",
	tense = "SimPre",
	voice = "passive",
	neg = "yes"
}



Rule: FVGPreConActNeg
// Present Continuous Active: is not eating or are not eating
// (is | are) VBG
(
	{Token.string ==~ "is|are"}
	(NEGATION)
	(ADVS)
	{Token.category == "VBG"}
):annotate 
-->
:annotate.VG  = {
	type = "FVG",
	tense = "PreCon",
	voice = "active",
	neg = "yes"
}



Rule: FVGPreConPasNeg
// Present Continuous Passive: is not being  eaten or are not being  eaten
// (is | are) being  VBN
(
	{Token.string ==~ "is|are"}
	(NEGATION)
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == "VBN"}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PreCon",
	voice = "active",
	neg = "yes"
}



Rule: FVGPrePerActNeg
// Present Perfect Active: has not eaten
// (has | have) VBN
(
	{Token.string ==~ "has|have"}
	(NEGATION)
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PrePer",
	voice = "active",
	neg = "yes"
}


Rule: FVGPrePerPasNeg
// Present Perfect Active: has not been eaten
// (has | have) been VBN
(
	{Token.string ==~ "has|have"}
	(NEGATION)
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PrePer",
	voice = "passive",
	neg = "yes"
}


Rule: FVGPrePerConActNeg
// Present Perfect Continuous Active: has not been eating
// (has | have) been VBG
(
	{Token.string ==~ "has|have"}
	(NEGATION)
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PrePerCon",
	voice = "active",
	neg = "yes"
}


Rule: FVGPrePerConPasNeg
// Present Perfect Continuous Active: (very rare) has not been being eaten
// (has | have) been being VBN
(
	{Token.string ==~ "has|have"}
	(NEGATION)
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PrePerCon",
	voice = "passive",
	neg = "yes"
}




Rule: FVGSimPasPasNeg
// Simple Past Pasive: was not eaten
// (was | were) VBN
(
	{Token.string ==~ "was|were"}
	(NEGATION)
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "SimPas",
	voice = "passive",
	neg = "yes"
}



Rule: FVGPasConActNeg
// Past Continuous Active: was not eating
// (was | were) VBG
(
	{Token.string ==~ "was|were"}
	(NEGATION)
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasCon",
	voice = "active",
	neg = "yes"
}



Rule: FVGPasConPasNeg
// Past Continuous Passive: was not eating
// (was | were) being VBN
(
	({Token.string ==~ "was|were"})
	(NEGATION)
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasCon",
	voice = "passive",
	neg = "yes"
}



Rule: FVGPasPerActNeg
// Past Perfect Active: had not eaten
//  had VBN

(
	{Token.string == "had"}
	(NEGATION)
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasPer",
	voice = "active",
	neg = "yes"
}



Rule: FVGPasPerPasNeg
// Past Perfect Passive: had not been eaten
//  had been VBN
(
	{Token.string == "had"}	
	(NEGATION)
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasPer",
	voice = "passive",
	neg = "yes"
}


Rule: FVGPasPerConActNoeg
// Past Perfect Continuous Active: had not been eating
//  had been VBG
(
	{Token.string == "had"}
	(NEGATION)
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasPerCon",
	voice = "active",
	neg = "yes"
}




Rule: FVGPasPerConPasNeg
// Past Perfect Continuous Passive: had not been being eaten
//  had been VBG
(
	{Token.string == "had"}
	(NEGATION)
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasPerCon",
	voice = "passive",
	neg = "yes"
}



Rule: FVGSimFutActNeg
// Simple Future Active: will not eat
// (will | shall) VB
(
	{Token.string ==~ "will|shall|sha|wo|ca|'ll"}
	(NEGATION)
	(
		(ADVS)
		{Token.category == VB}
	)?
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "SimFut",
	voice = "active",
	neg = "yes"
}



Rule: FVGSimFutPasNeg
// Simple Future Active: will not be eaten
// (will | shall) be  VBN
(
	{Token.string ==~ "will|shall|sha|wo|ca|'ll"}
	(NEGATION)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VB}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "SimFut",
	voice = "passive",
	neg = "yes"
}



Rule: FVGFutConActNeg
// Future Continuous Active: will not be eating
// (will | shall) be VBG
(
	{Token.string ==~ "will|shall|sha|wo|ca|'ll"}
	(NEGATION)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutCon",
	voice = "active",
	neg = "yes"
}


Rule: FVGFutConPasNeg
// Future Continuous Pasive: will not be being  eaten
// (will | shall) be being VBN
(
	{Token.string ==~ "will|shall|sha|wo|ca|'ll"}
	(NEGATION)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutCon",
	voice = "passive",
	neg = "yes"
}



Rule: FVGFutPerActNeg
// Future Pefect Active: will not have eaten
// (will | shall) have  VBN
(
	{Token.string ==~ "will|shall|sha|wo|ca|'ll"}
	(NEGATION)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutPer",
	voice = "active",
	neg = "yes"
}


Rule: FVGFutPerPasNeg
// Future Pefect Active: will not have being eaten
// (will | shall) have  been VBN
(
	{Token.string ==~ "will|shall|sha|wo|ca|'ll"}
	(NEGATION)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutPer",
	voice = "passive",
	neg = "yes"
}



Rule: FVGFutPerConActNeg
// Future Pefect Continuous Active: will not have been eating
// (will | shall) have been VBG
(
	{Token.string ==~ "will|shall|sha|wo|ca|'ll"}
	(NEGATION)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutPerCon",
	voice = "active",
	neg = "yes"
}




Rule: FVGFutPerConPasNeg
// Future Pefect Continuous Passive: will not have been being eaten
// (will | shall) have been being VBN
(
	{Token.string ==~ "will|shall|sha|wo|ca|'ll"}
	(NEGATION)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutPerCon",
	voice = "passive",
	neg = "yes"
}



Rule: FVGSimPreActNeg
(
	{Token.string ==~ "do|does"}
	(NEGATION)
	(ADVS)
	({Token.category == "VB"})?
):annotate 
-->
 :annotate.VG = {
 	type = "FVG",
	tense = "SimPre",
	voice = "active",
	neg = "yes"
}



Rule: FVGSimPasActNeg
(
	{Token.string == "did"}
	(NEGATION)
	(ADVS)
	({Token.category == "VB"})?
):annotate 
-->
 :annotate.VG = {
 	type = "FVG",
	tense = "SimPas",
	voice = "active",
	neg = "yes"
}



Rule: FVGSimPreActNeg
// Simple Present Active: is not
// VB not
(
	{Token.string ==~ "is|are|be|am|have|has"}
	(NEGATION) 
)
:annotate 
-->
 :annotate.VG = {
 	type = "FVG",
	tense = "SimPre",
	voice = "active",
	neg = "yes"
}



Rule: FVGSimPasActNeg
// Simple Passive Active: was not
// VB not
(
	{Token.string ==~ "was|were|had"}
	(NEGATION) 
)
:annotate 
-->
 :annotate.VG = {
 	type = "FVG",
	tense = "SimPas",
	voice = "active",
	neg = "yes"
}




Rule: FVGPreConActNeg
// Present Continuous Active: 
// not  VBG
(
	(NEGATION)
	(ADVS)
	{Token.category == "VBG"}
):annotate 
-->
:annotate.VG  = {
	type = "FVG",
	tense = "PreCon",
	voice = "active" ,
	neg = "yes"
}




// fvg.jape

// Finite Verb Groups

Rule: FVGSimPreAct
// Simple Present Active: eats or eat
// VBP | VBZ
(
	//(ADVS)
	{Token.category ==~ "VBP|VBZ"}
):annotate 
-->
 :annotate.VG = {
 	type = "FVG",
	tense = "SimPre",
	voice = "active"
}

  

Rule: FVGSimPrePas
// Simple Present Pasive: is eaten or are eaten
// (is | are) VBN
(
	{Token.string ==~ "is|are"}
	(ADVS)
	{Token.category == "VBN"}
):annotate 
-->
 :annotate.VG = {
 	type = "FVG",
	tense = "SimPre",
	voice = "passive"
}



Rule: FVGPreConAct
// Present Continuous Active: is eating or are eating
// (is | are) VBG
(
	{Token.string ==~ "is|are"}
	(ADVS)
	{Token.category == "VBG"}
):annotate 
-->
:annotate.VG  = {
	type = "FVG",
	tense = "PreCon",
	voice = "active"
}



Rule: FVGPreConPas
// Present Continuous Passive: is being  eaten or are being  eaten
// (is | are) being  VBN
(
	({Token.string ==~ "is|are"})?
	{Token.string == "being"}
	(ADVS)
	{Token.category == "VBN"}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PreCon",
	voice = "active"
}


Rule: FVGPrePerAct
// Present Perfect Active: has eaten
// (has | have) VBN
(
	{Token.string ==~ "has|have"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PrePer",
	voice = "active"
}


Rule: FVGPrePerPas
// Present Perfect Active: has been eaten
// (has | have) been VBN
(
	{Token.string ==~ "has|have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PrePer",
	voice = "passive"
}


Rule: FVGPrePerConAct
// Present Perfect Continuous Active: has been eating
// (has | have) been VBG
(
	{Token.string ==~ "has|have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PrePerCon",
	voice = "active"
}


Rule: FVGPrePerConPas
// Present Perfect Continuous Active: (very rare) has been being eaten
// (has | have) been being VBN

(
	{Token.string ==~ "has|have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PrePerCon",
	voice = "passive"
}


Rule: FVGSimPasAct
// Simple Past Active: ate
// VBD
(
	//(ADVS)
	{Token.category == VBD}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "SimPas",
	voice = "active"
}



Rule: FVGSimPasPas
// Simple Past Pasive: was eaten
// (was | were) VBN
(
	{Token.string ==~ "was|were"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "SimPas",
	voice = "passive"
}



Rule: FVGPasConAct
// Past Continuous Active: was eating
// (was | were) VBG
(
	{Token.string ==~ "was|were"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasCon",
	voice = "active"
}



Rule: FVGPasConPas
// Past Continuous Passive: was eating
// (was | were) being VBN
(
	{Token.string ==~ "was|were"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasCon",
	voice = "passive"
}


Rule: FVGPasPerAct
// Past Perfect Active: had eaten
//  had VBN
(
	{Token.string == "had"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasPer",
	voice = "active"
}



Rule: FVGPasPerPas
// Past Perfect Passive: had been eaten
//  had been VBN
(
	{Token.string == "had"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasPer",
	voice = "passive"
}


Rule: FVGPasPerConAct
// Past Perfect Continuous Active: had been eating
//  had been VBG
(
	{Token.string == "had"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasPerCon",
	voice = "active"
}



Rule: FVGPasPerConPas
// Past Perfect Continuous Passive: had been being eaten
//  had been VBG
(
	{Token.string == "had"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "PasPerCon",
	voice = "passive"
}



Rule: FVGSimFutAct
// Simple Future Active: will eat
// (will | shall) VB
(
	{Token.string ==~ "will|shall|'ll"}
	(ADVS)
	{Token.category == VB}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "SimFut",
	voice = "active"
}



Rule: FVGSimFutPas
// Simple Future Active: will be eaten
// (will | shall) be  VBN
(
	{Token.string ==~ "will|shall|'ll"}
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VB}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "SimFut",
	voice = "passive"
}



Rule: FVGFutConAct
// Future Continuous Active: will be eating
// (will | shall) be VBG
(
	{Token.string ==~ "will|shall|'ll"}
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutCon",
	voice = "active"
}


Rule: FVGFutConPas
// Future Continuous Pasive: will be being  eaten
// (will | shall) be being VBN
(
	{Token.string ==~ "will|shall|'ll"}
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutCon",
	voice = "passive"
}



Rule: FVGFutPerAct
// Future Pefect Active: will have eaten
// (will | shall) have  VBN
(
	{Token.string ==~ "will|shall|'ll"}
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutPer",
	voice = "active"
}


Rule: FVGFutPerPas
// Future Pefect Active: will have being eaten
// (will | shall) have  been VBN
(
	{Token.string ==~ "will|shall|'ll"}
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutPer",
	voice = "passive"
}



Rule: FVGFutPerConAct
// Future Pefect Continuous Active: will have been eating
// (will | shall) have been VBG
(
	{Token.string ==~ "will|shall|'ll"}
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutPerCon",
	voice = "active"
}




Rule: FVGFutPerConPas
// Future Pefect Continuous Passive: will have been being eaten
// (will | shall) have been being VBN
(
	{Token.string ==~ "will|shall|'ll"}
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "FVG",
	tense = "FutPerCon",
	voice = "passive"
}


// nfvg.jape

// Non-Finite Verb Groups




Rule: NFVGInfAct
// Simple Infinitive Active: to eat
// (to) VB
(
	(TO)
	(ADVS)
	{Token.category == VB}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "Inf",
	voice = "active"
}


Rule: NFVGInfActNeg
// Simple Infinitive Active: not to eat
// (to) VB
(
	(NOT_TO)
	(ADVS)
	{Token.category == VB}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "Inf",
	voice = "active",
	neg = "yes"
}


Rule: NFVGInfActBis
// Simple Infinitive Active: to eat
// (to) VB
(
	{Token.category == VB}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "Inf",
	voice = "active"
}


Rule: NFVGInfPas
// Simple Infinitive Passive: to be eaten
// (to) be VBN
(
	(TO)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "Inf",
	voice = "passive"
}



Rule: NFVGInfPasNeg
// Simple Infinitive Passive: not to be eaten
// (to) be VBN
(
	(NOT_TO)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "Inf",
	voice = "passive",
	neg = "yes"
}



Rule: NFVGPreConAct
// Infinitive Present Continuous: to be eating
// (to) be VBG
(
	(TO)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "PreCon",
	voice = "active"
}


Rule: NFVGPreConActNeg
// Infinitive Present Continuous:  not to be eating
// (to) be VBG
(
	(NOT_TO)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "PreCon",
	voice = "active",
	neg = "yes"
}



Rule: NFVGPreConPas
// Infinitive Present Continuous: to be being eaten
// (to) be being VBN
(
	(TO)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "PreCon",
	voice = "passive"
}


Rule: NFVGPreConPasNeg
// Infinitive Present Continuous: not to be being eaten
// (to) be being VBN
(
	(NOT_TO)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "PreCon",
	voice = "passive",
	neg = "yes"
}



Rule: NFVGPerAct
// Infinitive Perfect Active:  to have eaten
// (to) have VBN
(
	(TO)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "Per",
	voice = "active"
}


Rule: NFVGPerActNeg
// Infinitive Perfect Active:  not to have eaten
// (to) have VBN
(
	(NOT_TO)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "Per",
	voice = "active",
	neg = "yes"
}


Rule: NFVGPerPas
// Infinitive Perfect Passive:  to have been eaten
// (to) have been VBN
(
	(TO)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "Per",
	voice = "passive"
}

Rule: NFVGPerPasNeg
// Infinitive Perfect Passive: not to have been eaten
// (to) have been VBN
(
	(NOT_TO)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "Per",
	voice = "passive",
	neg = "yes"
}


Rule: NFVGPerConAct
// Infinitive Perfect Continuous Active:  to have been eating
// (to) have been VBG
(
	(TO)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "PerCon",
	voice = "active"
}


Rule: NFVGPerConActNeg
// Infinitive Perfect Continuous Active: not to have been eating
// (to) have been VBG
(
	(NOT_TO)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "PerCon",
	voice = "active",
	neg = "yes"
}


Rule: NFVGPerConPas
// Infinitive Perfect Continuous Passive:  to have been being eaten
// (to) have been being VBN
(
	(TO)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "PerCon",
	voice = "passive"
}


Rule: NFVGPerConPasNeg
// Infinitive Perfect Continuous Passive:  not to have been being eaten
// (to) have been being VBN
(
	(NOT_TO)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "NFVG",
	tense = "PerCon",
	voice = "passive",
	neg = "yes"
}



	


// modals


Rule: Modal1
// can walk
(
	(MODALS)
	(ADVS)
	{Token.category == VB}

):annotate 
-->
:annotate.VG = {
	type = "MODAL",
	tense = "none",
	voice = "none"
}



Rule: Modal1Neg
Priority: 100
// can not walk
(
	(MODALS)
	(ADVS)
	(NEGATION)
	(
		(ADVS)
		{Token.category == VB}
	)?
):annotate 
-->
:annotate.VG = {
	type = "MODAL",
	tense = "none",
	voice = "none",
	neg = "yes"
}



Rule: Modal2
// might be walking
(
	(MODALS)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VBG}

):annotate 
-->
:annotate.VG = {
	type = "MODAL",
	tense = "BeVBG",
	voice = "none"
}




Rule: Modal2Neg
Priority: 100
// might not be walking
(
	(MODALS)
	(NEGATION)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VBG}

):annotate 
-->
:annotate.VG = {
	type = "MODAL",
	tense = "BeVBG",
	voice = "none",
	neg = "yes"
}




Rule: Modal3
// might have walked
(
	(MODALS)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.category == VBN}

):annotate 
-->
:annotate.VG = {
	type = "MODAL",
	tense = "HaveVBN",
	voice = "none"
}




Rule: Modal3Neg
Priority: 100
// might not have walked
(
	(MODALS)
	(NEGATION)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.category == VBN}

):annotate 
-->
:annotate.VG = {
	type = "MODAL",
	tense = "HaveVBN",
	voice = "none",
	neg = "yes"
}




Rule: Modal4
// might be walked
// might be carefully assessed
(
	(MODALS)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VBN}

):annotate 
-->
:annotate.VG = {
	type = "MODAL",
	tense = "BeVBN",
	voice = "none"
}



Rule: Modal4Neg
Priority: 100
// might not be used
(
	(MODALS)
	(NEGATION)
	(ADVS)
	{Token.string == "be"}
	(ADVS)
	{Token.category == VBN}

):annotate 
-->
:annotate.VG = {
	type = "MODAL",
	tense = "BeVBN",
	voice = "none",
	neg = "yes"
}




Rule: Modal5
// might have been walking
(
	(MODALS)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBG}

):annotate 
-->
:annotate.VG = {
	type = "MODAL",
	tense = "HaveBeenVBG",
	voice = "none"
}



Rule: Modal5Neg
Priority: 100
// might not have been walking
(
	(MODALS)
	(NEGATION)
	(ADVS)
	{Token.string == "have"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBG}

):annotate 
-->
:annotate.VG = {
	type = "MODAL",
	tense = "HaveBeenVBG",
	voice = "none",
	neg = "yes"
}



// participles.jape

// participles -ing, -ed, -n


// present participles (i.e. INGs)


Rule: PARTPreAct
// Participle Present: eating
// VBG
(
	{Token.category == VBG}
):annotate 
-->
:annotate.VG = {
	type = "PART",
	tense = "Pre",
	voice = "active"
}


Rule: PARTPrePas
// Participle Present Passive: being  eaten
// being VBN
(
	{Token.string == "being"}
	(ADVS)
	{Token.category == VBN}

):annotate 
-->
:annotate.VG = {
	type = "PART",
	tense = "Pre",
	voice = "passive"
}



Rule: PARTPrePerAct
// Participle Present Perfect Active: having eaten
// having VBN
(
	{Token.string == "having"}
	(ADVS)
	{Token.category == VBN}

):annotate 
-->
:annotate.VG = {
type = "PART",
tense = "PrePer",
voice = "active"

}


Rule: PARTPrePerPas
// Participle Present Perfect Passive: having been eaten
// having been VBN
(
	{Token.string == "having"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBN}

):annotate 
-->
:annotate.VG = {
type = "PART",
tense = "PrePer",
voice = "passive"

}


Rule: PARTPrePerConAct
// Participle Present Perfect Cont.  Active: having been eating
// having VBN
(
	{Token.string == "having"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBG}

):annotate 
-->
:annotate.VG = {
	type = "PART",
	tense = "PrePerCon",
	voice = "active"
}


Rule: PARTPrePerConPas
// Participle Present Perfect Cont.  Passive: having been being eaten
// having been being VBN
(
	{Token.string == "having"}
	(ADVS)
	{Token.string == "been"}
	(ADVS)
	{Token.string == "being"}
	(ADVS)
	{Token.category == VB}
):annotate 
-->
:annotate.VG = {
	type = "PART",
	tense = "PrePerCon",
	voice = "passive"
}

// present participles (i.e. -ed or irregulars)



Rule: PARTPas
// Past Participle: eaten
// VBN
(
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "PART",
	tense = "Pas",
	voice = "none"
}


Rule: PARTPasPer
// Past Participle: eaten
// VBN

(
	{Token.string == "been"}
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "PART",
	tense = "PasPer",
	voice = "none"
}

// special_vg.jape


// Some special verbs

Macro: TOBE
(
	{Token.string ==~ "be|is|am|'s|m|'m|are|was|were"}
)


Macro: TOHAVE
(
	{Token.string ==~ "have|has|'s|'ve|'d|had"}
)


Macro: SPECIALS
(
	(
		(TOHAVE)
		(ADVS)
		{Token.string == "better"}
	)
	|
	(
		(TOBE)
		(ADVS)
		{Token.string == "supposed"}
		(ADVS)
		{Token.string == "to"}
	)
	|
	(
		(TOBE)
		(ADVS)
		{Token.string == "to"}
	)
	|
	(
		(TOHAVE)
		(ADVS)
		{Token.string == "to"}
	)
	|
	(
		(TOHAVE)
		(ADVS)
		{Token.string == "got"}
		{Token.string == "to"}
	)
	|
	(
		(TOBE)
		(ADVS)
		{Token.string == "going"}
		(ADVS)
		{Token.string == "to"}
	)
	|
	(
		(TOBE)
		(ADVS)
		{Token.string == "able"}
		(ADVS)
		{Token.string == "to"}
	)
	|
	(
		{Token.string == "used"}
		(ADVS)
		{Token.string == "to"}
	)
)


Rule: Special1
// SPECIAL + VB
(
	(SPECIALS)
	(ADVS)
	{Token.category == VB}
):annotate 
-->
:annotate.VG = {
	type = "SPECIAL",
	tense = "Pre",
	voice = "none"
}



Rule: Special2
// SPECIAL + VBN
(
	(SPECIALS)
	(ADVS)
	{Token.category == VBN}
):annotate 
-->
:annotate.VG = {
	type = "SPECIAL",
	tense = "Pas",
	voice = "none"
}
