/*
*  
* Filename: 		predicate.jape
* Author:			Phil Gooch 2012
* Description:		Predicate relations
*				
*/



Phase:	PredicatePhrase
Input:  Split Token VG
Options: control = appelt



MACRO: ADJ
(
	(
		{Token.category == JJ} |
		{Token.category == JJS} |
		{Token.category == JJSS} |
		{Token.category == JJR}
	)
)

MACRO: ADV
(
	{Token.category == RB} |
	{Token.category == RBR} |
	{Token.category == RBS} 
)


MACRO: NP
(
	({Token.category == DT})?
	(ADV)[0, 2]
	(ADJ)[0, 5]
	(
		{Token.category ==~ "NN|NNS", Token.string ==~ "[a-z]{2,}(age|[ae]nt|[st]ion|ness|[ae]nce|ship)(s)?"} |
		{Token.category ==~ "NN|NNS", Token.string ==~ "[a-z]{2,}(c|t)(y|ies)?"}
	)
)


MACRO: IN
(
	{Token.category == IN} |
	{Token.category == RP} |
	{Token.category == TO, !VG}
)
	
	
MACRO: BE
(
	{VG contains {Token.string ==~ "am|are|is|was|were|be|been|being|seem|seems|seemed|seeming|becoming|become|becomes|became"}} 
)


MACRO: HAVE
(
	{VG contains {Token.string ==~ "have|having|has|had"}} 
)


MACRO: PREPREDICATE
(
	(ADV)[0, 2] 
	(
		{VG}
	)[1, 3]
)


MACRO: PREPREDICATE2
(
	(ADV)[1, 2] 
	(
		{VG}
	)[1, 3]
	(
		NP
		IN
	)?
)


MACRO: PREDICATE
(
	(ADV)[0, 2]
	(ADJ)[0, 5] 
	(ADV)?
	(
		{VG.tense == Inf} | 
		{VG.tense =~ "Per"} | 
		{VG.tense =~ "Pre"} |
		{VG.neg == yes} |
		IN
	)[1, 2]
	(
		NP
		IN
	)?
)



/* is effective as, may be no more effective than */
Rule: MatchBeAdjectivalPredicate
(
	(ADV)[0, 2]
	(
		{VG.type == "MODAL"} | 
		BE
	)[1, 2] 
	PREDICATE
):pred
-->                        
:pred.Predicate = {type="be"}



Rule: MatchHaveAdjectivalPredicate
(
	(ADV)[0, 2]
	(
		{VG.type == "MODAL"} | 
		HAVE
	)[1, 2] 
	PREDICATE
):pred
-->                        
:pred.Predicate = {type="has"}



Rule: MatchAdjectivalPredicate
(
	PREPREDICATE
	PREDICATE
):pred
-->                        
:pred.Predicate = {type="adj"}


Rule: MatchPrePredicate
(
	PREPREDICATE2
):pred
-->                        
:pred.Predicate = {type="pre"}


Rule: MatchInfinitivePredicate
(
	{VG}
	(
		{VG@cleanString =~ "ing$"} |
		{VG contains {Token.category == TO}}
	)
):pred
{!Token.category == NN}
-->                        
:pred.Predicate = {}



Rule: MatchModalPredicate
(
	{VG.type == MODAL}
):pred
-->                        
:pred.Predicate = {}


Rule: MatchNegPredicate
(
	{VG.neg == yes}
):pred
-->                        
:pred.Predicate = {polarity=NEG}


Rule: MatchPPPredicate
(
	PREPREDICATE
	NP
	IN
):pred
-->                        
:pred.Predicate = {type="pp"}

	
